Matheus Moreira da Silva Figueiredo - 2320813
Luana Nobre da Costa - 2310204

--- * --- --- * --- --- * --- --- * --- --- * --- --- * --- 

1) Execute o programa “ctrl-c.c”. Digite Ctrl-C e Ctrl-\. Analise o resultado. Neste mesmo programa, remova os comandos signal( ) e repita o teste anterior observando os resultados

ctrl-c.c

#include <stdio.h>
#include <signal.h>
#include <stdlib.h>

#define EVER ;;

void intHandler(int sinal);
void quitHandler(int sinal);

int main (void){

    void (*p)(int);
    // ponteiro para função que recebe int como 
    // parâmetro

    p = signal(SIGINT, intHandler);
    printf("Endereco do manipulador anterior %p\n", p);

    p = signal(SIGQUIT, quitHandler);
    printf("Endereco do manipulador anterior %p\n", p);
    puts ("Ctrl-C desabilitado. Use Ctrl-\\ para terminar");

    for(EVER);
}
    
void intHandler(int sinal){
    printf("Você pressionou Ctrl-C (%d) \n", sinal);
}
void quitHandler(int sinal){
    printf("Terminando o processo...\n");
    exit(0);
}

Compilação e execução
$ gcc ctrl-c.c -o exe
$ ./exe

Resultado
Endereco do manipulador anterior (nil)
Endereco do manipulador anterior (nil)
Ctrl-C desabilitado. Use Ctrl-\ para terminar
^CVocê pressionou Ctrl-C (2)
^\Terminando o processo...

Conclusão
Nesse programa, é esperado que o usuário entre com CONTROL+C (tecla que representa SIGINT) para que uma função intHandler seja executada e similarmente, é esperado que o usuário entre com CONTROL+\ (tecla que representa SIGQUIT) para que a função quitHandler seja executada. 
As funções em si não fazem nada demais, apenas imprimem uma mensagem indicando a ação que foi feita.
Ao eliminar as linhas que mandam os sinais para as funções, o programa espera uma entrada e é encerrado quando o usuário entra com CONTROL+C, que normalmente encerra o programa.

--- * --- --- * --- --- * --- --- * --- --- * --- --- * --- 

2) Tente fazer um programa para interceptar o sinal SIGKILL. Você conseguiu? Explique.

Conclusão
Não foi possível implementar o programa. O sinal SIGKILL é gerenciado exclusivamente pelo kernel do sistema operacional, logo não pode ser interceptado.

--- * --- --- * --- --- * --- --- * --- --- * --- --- * --- 

3) Execute e explique o funcionamento de filhocidio.c

filhocidio.c

#include <stdio.h> 
#include <stdlib.h> 
#include <unistd.h>  
#include <sys/types.h> 
#include <sys/wait.h> 
#include <signal.h> 

void childhandler(int signo);
int delay;

int main(int argc, char *argv[]) {
    pid_t pid;

    signal(SIGCHLD, childhandler);
    if ((pid = fork()) < 0) {
        fprintf(stderr, "Erro ao criar filho\n");
        exit(-1);
    }

    if (pid == 0) { /* child */
        execve(argv[2], NULL, NULL); /* ou sleep(3); */
    } else { /* parent */
        sscanf(argv[1], "%d", &delay); /* read delay from command line */
        sleep(delay);
        printf("Program %s exceeded limit of %d seconds!\n", argv[2], delay);
        kill(pid, SIGKILL);
        sleep(1); /* necessary for SIGCHLD to arrive */
    }
    return 0;
}

void childhandler(int signo) /* Executed if child dies before parent */ {
    int status;
    pid_t pid = wait(&status);
    printf("Child %d terminated within %d seconds com estado %d.\n", pid, delay, status);
    exit(0);
}


Compilação e execução
$ gcc filhocidio.c -o exe
$ ./exe 5 2

Resultado
Child 45633 terminated within 5 seconds com estado 0.

Conclusão
O programa recebe 2 valores do usuário que irão definir respectivamente: o tempo limite para o encerramento de um processo-filho e o tempo de execução de um processo-filho.
É programado para que a função childhandler seja executada quando o processo-filho acabar, exibindo uma mensagem indicando o mesmo.
Caso o processo-filho não consiga ser executado no tempo reservado por ele, o processo-pai entra em ação enviando um sinal para que o processo-filho seja eliminado e imprime uma mensagem indicando o mesmo.

--- * --- --- * --- --- * --- --- * --- --- * --- --- * --- 

4) Usando SIGSTOP e SIGCONT faça um programa que crie 2 processos filho e alterne a execução dos filhos. Após 10 trocas de contexto, o processo pai mata os processos filho. 
OBS: Os processos filho são formados por loops infinitos.

ex04.c

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h> // processos
#include <signal.h> // sinais

int main(void){

    int pid1, pid2;
    
    pid1 = fork();
    if (pid1 < 0){
        perror("Erro no fork");
        exit(1);
    }
    // Filho 1
    else if(pid1 == 0){
        while(1){
            printf("Executando o filho 1...\n");
            sleep(1);
        }
    } 

    pid2 = fork();
    if (pid2 < 0){
        perror("Erro no fork");
        exit(1);
    }
    // Filho 2
    else if(pid2 == 0){
        while(1){
            printf("Executando o filho 2...\n");
            sleep(1);
        }
    }

    // Pai
    for(int i=0; i<10; i++){
        printf("Fazendo pela %d vez\n", i+1);

        // Filho 1
        printf("Pausando o filho 1 e continuando o filho 2\n");
        kill(pid1, SIGSTOP);
        kill(pid2, SIGCONT);
        sleep(1);

        // Filho 2
        printf("Pausando o filho 2 e continuando o filho 1\n");
        kill(pid2, SIGSTOP);
        kill(pid1, SIGCONT);
        sleep(1);
    }
    
    // Filho 1
    printf("(!) Matando o filho 1\n");
    kill(pid1, SIGKILL);
    sleep(1);

    // Filho 2
    printf("(!) Matando o filho 2\n");
    kill(pid2, SIGKILL);
    sleep(1);

    return 0;
}

Compilação e execução
$ gcc ex04.c -o exe
$ ./exe

Resultado
Executando o filho 1...
Fazendo pela 1 vez
Pausando o filho 1 e continuando o filho 2
Executando o filho 2...
Executando o filho 2...
Pausando o filho 2 e continuando o filho 1
Executando o filho 1...
Fazendo pela 2 vez
Pausando o filho 1 e continuando o filho 2
Executando o filho 2...
...

Conclusão
São feitos 2 forks para que 2 processos-filhos sejam criados. Neles, tudo que é feito é imprimr uma mensagem indicando qual está sendo executado e um sleep é dado, passando a prioridade para outro processo. Isso é feito num loop.
O processo-pai entra num loop que, alternadamente (10x), envia um sinal para que o processo-filho 1 