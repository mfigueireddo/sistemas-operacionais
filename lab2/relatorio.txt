Matheus Moreira da Silva Figueiredo - 2320813
Luana Nobre da Costa - 2310204

--- * --- --- * --- --- * --- --- * --- --- * --- --- * --- 

1) Faça um programa para somar matrizes de acordo com o seguinte algoritmo
- O primeiro processo irá criar duas matrizes preenchidas e uma terceira vazia em 3 áreas de memória compartilhada.
- Para cada linha da matriz solução, o seu programa deverá gerar um processo para o seu cálculo.
OBS: implemente as matrizes como vetores de tamanho (linha x coluna) e aloque a shared memory para os vetores correspondentes, pois acessar os elementos (i,j) é complexo. 

ex01.c

#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <unistd.h>
#include <stdio.h>

int main(void){ 

   int segmento[3], *matriz[3], pid;

   // Cria uma SHM
   for(int i = 0; i < 3; i++) {
       segmento[i] = shmget(IPC_PRIVATE, 9 * sizeof(int), IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
       if (segmento[i] == -1) {
           perror("Erro na criação do segmento de memória compartilhada");
           return 1;
       }
   }

   // Cria ponteiros para a SHM
   for(int i=0; i<3; i++){
    matriz[i] = (int*)shmat(segmento[i], 0, 0);
   }

   // Salvando os valores das matrizes
   int aux[3][9]= {
    {5, 7, 9, 6, 3, 6, 3, 1, 2},
    {5, 3, 0, 6, 2, 6, 5, 7, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0},
   };

   // Atribuindo os valores às matrizes alocadas na SHM
   for(int i = 0; i < 9; i++) {
       matriz[0][i] = aux[0][i];
       matriz[1][i] = aux[1][i];
       matriz[2][i] = aux[2][i];
   }

   for(int i = 0; i < 3; i++) {
       pid = fork();

        // Erro
        if(pid<0){
            perror("Erro na criação de processos");
            return 2;
        } 

        // Filho
        else if(pid == 0){
            // Soma de linhas
            for(int j=i*3; j < (i+1)*3 ; j++){
                matriz[2][j] = matriz[0][j] + matriz[1][j];
            }
            return 0;
        }
   }

    // Pai espera todos os filhos
    for(int i = 0; i < 3; i++) {
        wait(NULL);
    }
 

   // Imprime o resultado final
   for(int i = 0; i < 9; i++) {
       printf("%2.0d ", matriz[2][i]);
       if(i == 2 || i == 5) {
           printf("\n");
       }
   }

   // Desanexando e destruindo os SHM
   for(int i = 0; i < 3; i++) {
        shmdt(matriz[i]);
        shmctl(segmento[i], IPC_RMID, 0);
    }

   return 0;
}

Compilação e execução
$ gcc -Wall -o exe ex01.c
$ ./exe

Resultado
10 10 9
12 5 12
8 8 2

Conclusão
3 SHM foram criada e seus endereços foram armazenados em segmento[3].
Ponteiros para essa região de memória foram criados e armazenados em *matriz[3]
As 3 matrizes 3x3 foram montadas de maneira unidimensional para facilitar a implementação
Foram criados 3 processos, cada um responsável por somar uma linha das matrizes [0] e [1] e armazenar o resultado na matriz[2]
Enquanto isso, o pai apenas esperava que os filhos acabassem de fazer as contas e depois imprimia a matriz resultante

--- * --- --- * --- --- * --- --- * --- --- * --- --- * --- 

2) Faça um programa que:
- Leia uma mensagem do dia do stdin (ou arquivo)
- Crie uma memória compartilhada com a chave 8752
- Salve a mensagem na memória

Faça um outro programa “cliente” que utilize a mesma chave (8752) e exiba a mensagem do dia para o usuário

ex02_arq1.c 

#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <unistd.h>
#include <stdio.h>
#include <string.h>

int main(void){

    char mensagem[81], *ptr;
    int segmento;

    // Recebe uma mensagem do usuário
    printf("Qual a mensagem do dia? ");
    fgets(mensagem, sizeof(mensagem), stdin);

    segmento = shmget(8752, sizeof(mensagem), IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR); // Cria um SHM
    
    ptr = (char*)shmat(segmento, 0, 0); // Cria um ponteiro para a SHM

    strcpy(ptr, mensagem); // Salvando a mensagem

    return 0;
}

ex02_arq2.c

#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <unistd.h>
#include <stdio.h>

int main(void){

    char *ptr;
    int segmento;

    segmento = shmget(8752, sizeof(char)*81 , S_IRUSR); // Lê o SHM
    
    ptr = (char*)shmat(segmento, 0, 0); // Cria um ponteiro para a SHM

    printf("%s", ptr); // Imprimindo a mensagem do dia

    shmdt(ptr); // Desvincula a SHM
    shmctl(segmento, IPC_RMID, 0); // Exclui a SHM

    return 0;
}

Compilação e execução
$ gcc -Wall -o servidor ex02_arq1.c
$ gcc -Wall -o servidor ex02_arq1.c
$ ./servidor
$ ./cliente

Resultado
Qual a mensagem do dia? Hello, World!
Hello, World!

Conclusão
ex02_arq1.c 
- Pega uma mensagem do usuário utilizando o fgets e armazena em mensagem
- Cria uma SHM e armazena em segmento
- Cria um ponteiro para a SHM e armazena em ptr
- Copia o input do usuário armazenado em mensagem para a área da SHM apontada pelo ptr
ex02_arq2.c
- Acessa a SHM já criada
- Cria um ponteiro para a SHM
- Imprime a string armazenada na área da SHM apontada pelo ptr
- Desvincula a SHM
- Exclui a SHM

--- * --- --- * --- --- * --- --- * --- --- * --- --- * --- 

3) Faça um programa paralelo (com pelo menos 4 processos) para localizar uma chave em um vetor.
- Crie uma memória compartilhada com dados numéricos inteiros e desordenados e a divida pelo número de processos
- Cada processo deve procurar o dado na sua área de memória e informar a posição onde o dado foi localizado.

ex03.c

#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/wait.h>
#include <unistd.h>

int main() {
    int tamanho = 20;
    int num_proc = 4;
    int chave = 4;
    int tam_por_proc = tamanho / num_proc;
    int segmento, *vetor;

    // Imprime a chave
    printf("Chave a ser buscada: %d\n", chave);

    // Cria uma SHM
    segmento = shmget(IPC_PRIVATE, tamanho * sizeof(int), IPC_CREAT | IPC_EXCL | 0600);
    if (segmento == -1) {
        perror("Erro ao alocar memoria compartilhada");
        exit(1);
    }
    
    // Cria um ponteiro para a SHM
    vetor = (int *)shmat(segmento, 0, 0);

    // Cria um número randômico com base no pid
    srand(getpid());

    // Armazena números randômicos na SHM
    for (int i = 0; i < tamanho; i++) {
        vetor[i] = rand() % 10;
    }

    // Imprime os valores gerados
    printf("Vetor: ");
    for (int i = 0; i < tamanho; i++) {
        printf("%d ", vetor[i]);
    }
    printf("\n\n");

    for (int i = 0; i < num_proc; i++) { // Cria 4 processos

        // Processo-filho
        if (fork() == 0) {
            int ini = i * tam_por_proc; // delimita o início da SHM a ser lida pelo processo
            int fim = (i == num_proc - 1) ? tamanho : ini + tam_por_proc; // delimita o fim da SHM a ser lida pelo processo

            for (int j = ini; j < fim; j++) { // Percorre a sua respectiva SHM
                if (vetor[j] == chave) { 
                    printf("Processo %d encontrou a chave na posicao %d\n", getpid(), j);
                }
            }

            shmdt(vetor); // Desanexa a SHM
            exit(0);
        }
    }

    // Processo-pai
    for (int i = 0; i < num_proc; i++) {
        wait(NULL);
    }

    // Desanexa a SHM
    shmdt(vetor);
    // Exclui a SHM
    shmctl(segmento, IPC_RMID, 0);

    return 0;
}

Compilação e execução
$ gcc -Wall -o exe ex03.c
$ ./exe

Resultado
Chave a ser buscada: 4
Vetor: 3 0 0 5 2 7 1 3 8 2 8 3 9 1 9 2 6 9 4 3

Processo 30765 encontrou a chave na posicao 18

Conclusão
Cria uma SHM e armazena em segmento
Cria um ponteiro para a SHM e armazena em vetor
Armazena 20 valores randômicos na SHM
Cria 4 processos, cada um responsável pela leitura de 1/4 da SHM
Cada um dos processos percorre sua área procurando a chave 4
Se a chave for encontrada em um dos processos, uma mensagem é exibida
Enquanto isso, o processo-pai apenas espera que os processos-filhos sejam encerrados
Ao final, a SHM é desanexada e excluída

--- * --- --- * --- --- * --- --- * --- --- * --- --- * --- 

4)  Faça um programa que:
- Tenha um processo pai que abre dois blocos de memória compartilhada, m1 e m2.
- Cria dois processos filho (use exec), P1 e P2: estes também fazem attach em m1 ou m2 respectivamente
- Cada um dá um sleep() randômico e escreve um valor int na área compartilhada dele, e avisa o processo pai que um novo valor foi gerado, escrevendo tb um nr de sequencia
- O pai fica em loop verificando se houve um novo valor. Apenas quando ambos P1 e P2 geraram um novo valor, o pai imprime o produto dos valores gerados por P1 e P2

ex04_pai.c

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/wait.h>
#include <time.h>
#include <string.h>

// Chaves da SHM
#define KEY1 1234
#define KEY2 5678

// Estrutura utilizada na SHM
struct Data {
    int value; // valor randômico
    int seq; // flag de mudança de sinal
};

int main(void) {

    // Cria as áreas de memória compartilhadas
    int shm1 = shmget(KEY1, sizeof(struct Data), IPC_CREAT | 0666);
    int shm2 = shmget(KEY2, sizeof(struct Data), IPC_CREAT | 0666);
    if (shm1 == -1 || shm2 == -1) {
        perror("Erro ao criar memória compartilhada");
        exit(1);
    }

    // Cria ponteiros para a SHM
    struct Data *m1 = (struct Data *) shmat(shm1, NULL, 0);
    struct Data *m2 = (struct Data *) shmat(shm2, NULL, 0);

    // Indica que ainda não houveram alterações nas variáveis
    m1->seq = -1;
    m2->seq = -1;

    // Cria um novo processo que executa um outro arquivo
    if (fork() == 0) {
        execl("./ex04_p1", "ex04_p1", NULL);
        perror("Erro ao executar p1");
        exit(1);
    }

    // Cria um novo processo que executa um outro arquivo
    if (fork() == 0) {
        execl("./ex04_p2", "ex04_p2", NULL);
        perror("Erro ao executar p2");
        exit(1);
    }

    // Variáveis auxiliares
    int last_seq1 = -1, last_seq2 = -1;

    // Processo-pai em loop procurando por mudanças nos valores dos filhos
    while (1) {
        if (m1->seq != last_seq1 && m2->seq != last_seq2) { // Se houve alguma mudança nos valores
            printf("Novo cálculo: %d * %d = %d\n", m1->value, m2->value, m1->value * m2->value);
            last_seq1 = m1->seq;
            last_seq2 = m2->seq;
        }
        sleep(1);
    }

    return 0;
}

ex_04_p1.c

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <time.h>

// Chave da SHM
#define KEY1 1234

// Estrutura utilizada na SHM
struct Data {
    int value; // valor randômico
    int seq; // flag de mudança de sinal
};

int main(void) {

    // Acessa uma SHM criada previamente
    int shm = shmget(KEY1, sizeof(struct Data), 0666);
    if (shm == -1) {
        perror("Erro ao acessar memória compartilhada");
        exit(1);
    }

    // Cria ponteiro para a SHM
    struct Data *m1 = (struct Data *) shmat(shm, NULL, 0);

    // Armazena o número de sequência
    int seq = 0;

    // Cria um número randômico com base no PID
    srand(getpid());

    // Processo-filho
    while (1) {
        sleep(rand() % 5 + 1);
        m1->value = rand() % 10; // escreve um valor na SHM
        m1->seq = ++seq;
    }

    return 0;
}

ex04_p2.c

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <time.h>

// Chave da SHM
#define KEY2 5678

// Estrutura utilizada na SHM
struct Data {
    int value; // valor randômico
    int seq; // flag de mudança de sinal
};

int main(void) {

    // Acessa uma SHM criada previamente
    int shm = shmget(KEY2, sizeof(struct Data), 0666);
    if (shm == -1) {
        perror("Erro ao acessar memória compartilhada");
        exit(1);
    }

    // Cria ponteiro para a SHM
    struct Data *m2 = (struct Data *) shmat(shm, NULL, 0);
    
    // Armazena o número de sequência
    int seq = 0;

    // Cria um número randômico com base no PID
    srand(getpid());

    // Processo-filho
    while (1) {
        sleep(rand() % 5 + 1);
        m2->value = rand() % 10; // escreve um valor na SHM
        m2->seq = ++seq;
    }

    return 0;
}

Compilação e execução
$ gcc -Wall -o exe ex04_pai.c
$ gcc -Wall -o exe ex04_p1 ex04_p1.c
$ gcc -Wall -o exe ex04_p2 ex04_p2.c
$ ./exe

Resultado
Novo cálculo: 3 * 6 = 18
Novo cálculo: 6 * 0 = 0
Novo cálculo: 5 * 0 = 0
Novo cálculo: 3 * 3 = 9
...

Conclusão
Duas áreas de memória são criadas e armazenadas em shm1 e shm2 
Dois ponteiros para essas SHM são criados e armazenados em m1 e m2
m1 e m2 são do tipo estruturado Data, criado para armazenar um value e o número de sequência
Por padrão, o número de sequência em ambas as variáveis será -1
2 processos são criados, cada um executando um arquivo diferente
Cada um dos arquivos
- Acessa a SHM
- Cria um ponteiro para a SHM
- Armazena um valor randômico (baseado no PID) na SHM
- Incrementa o número de sequência
O processo-pai fica conferindo se os procesos-filho já atualizaram os números na SHM
Quando eles tiverem atualizado, ele imprime o valor da multiplicação deles
Após isso, esse processo se repete N vezes